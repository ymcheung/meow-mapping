---
import { postSchema } from '@/schema';
import type { Locale } from '@/types';
import type { z } from 'astro:content';
import messages from '@/i18n/messages';
import BaseHead from './_BaseHead.astro';
import Dock from '@/pages/_Dock.astro';
import { format } from 'date-fns';
import { getRelativeLocaleUrl } from 'astro:i18n';
import '@/styles/global.css';

const pageProps = postSchema.pick({
  title: true,
  description: true,
  hasCover: true,
  cover: true,
  difficulty: true,
  feed: true,
  dateVisited: true,
  dateModified: true,
  datePublished: true
});
type Props = z.infer<typeof pageProps>;

const {
  title,
  description,
  hasCover,
  cover,
  difficulty,
  feed,
  dateVisited,
  dateModified,
  datePublished
} = Astro.props as Props;

const formatDateModified = format(dateModified, 'MM-dd-yyyy');

const formatDateVisited = format(dateVisited, 'MM-dd-yyyy HH:mm');

const locale = Astro.currentLocale as Locale;
const isTW = locale === 'tw';

const pathHome = getRelativeLocaleUrl(locale);

const fullTitle = isTW
  ? `åˆ°${title}${messages[locale].layout.page.title}`
  : `Cat Spotting in ${title}`;
---

<html lang={isTW ? 'zh-TW' : locale}>
  <BaseHead
    title={fullTitle}
    description={description}
    hasCover={hasCover}
    cover={cover}
    dateModified={dateModified}
    datePublished={datePublished}
  />
  <body>
    <main>
      <article>
        <a class:list={{ prefix: true, isItalic: !isTW }} href={pathHome}
          >{messages[locale].layout.page.title}</a
        >
        <h1>
          <span class="title">{title}</span>
        </h1>
        <dl class="meta">
          <div class="metaItem">
            <dt class="metaTitle">
              {messages[locale].layout.page.difficulty.title}
            </dt>
            <dd class="metaDetail">
              {
                messages[locale].layout.page.difficulty[difficulty.level]
                  .description
              }
            </dd>
          </div>
          <div class="metaItem">
            <dt class="metaTitle">
              {messages[locale].layout.page.feeding.title}
            </dt>
            <dd class="metaDetail">
              {
                messages[locale].layout.page.feeding[feed ? 'true' : 'false']
                  .description
              }
            </dd>
          </div>
        </dl>
        <slot />
        <dl class="meta">
          <div class="metaItem">
            <dt class="metaTitle">
              {messages[locale].layout.page.visited.title}
            </dt>
            <dd class="metaDetail">
              {formatDateVisited}
            </dd>
          </div>
          <div class="metaItem">
            <dt class="metaTitle">
              {messages[locale].layout.page.updated.title}
            </dt>
            <dd class="metaDetail">
              <time datetime={dateModified.toISOString()}
                >{formatDateModified}</time
              >
            </dd>
          </div>
        </dl>
      </article>
    </main>
    <Dock />
  </body>
</html>
<style>
  @import 'open-props/media';
  @import 'open-props/colors-hsl';

  h1 {
    max-inline-size: var(--size-header-3);
    transform: skewY(-2deg);
  }

  .prefix {
    display: inline-block;
    font-size: var(--font-size-fluid-1);
    color: hsl(var(--gray-7-hsl));
    font-weight: 400;
    text-decoration-color: hsl(var(--gray-3-hsl));
    text-decoration-line: underline;
    transform: skewY(-2deg);
  }

  .prefix:hover {
    text-decoration-color: hsl(var(--choco-7-hsl));
    text-decoration-style: double;
  }

  .isItalic {
    font-style: italic;
  }

  h1 .title {
    display: block;
    padding-inline-start: var(--size-5);
    color: hsl(var(--choco-7-hsl));
    font-size: var(--font-size-fluid-3);
    font-weight: 700;
  }

  @media (--OSdark) {
    h1 .title {
      color: hsl(46, 100%, 48%);
    }

    .prefix {
      color: hsl(var(--gray-4-hsl));
      text-decoration-color: hsl(var(--gray-6-hsl));
    }

    .prefix:hover {
      color: hsl(var(--gray-4-hsl));
      text-decoration-color: hsl(46, 100%, 48%);
    }
  }

  .logo {
    padding-inline: var(--size-2);
    padding-block-start: var(--size-2);
    padding-block-end: var(--size-4);
    position: fixed;
    right: var(--size-2);
    bottom: var(--size-2);
    left: var(--size-2);
    background-color: hsl(var(--gray-2-hsl) / 80%);
    backdrop-filter: blur(12px);
    border-radius: var(--radius-3);
    box-shadow: var(--shadow-2);
  }

  @media (--OSdark) {
    .logo {
      background-color: hsl(var(--gray-10-hsl) / 80%);
    }
  }

  .logoName {
    display: block;
    color: var(--gray-10);
    font-size: var(--font-size-fluid-2);
    transform: skewY(-4deg);
  }

  @media (--OSdark) {
    .logoName {
      color: hsl(46, 100%, 48%);
    }
  }

  .logoDescription {
    display: block;
    margin-inline-start: calc(var(--size-8));
    color: var(--gray-10);
    font-size: var(--font-size-fluid-1);
    font-weight: 400;
    font-style: italic;
    transform: skewY(-4deg);
  }

  @media (--OSdark) {
    .logoDescription {
      color: var(--gray-4);
    }
  }

  main {
    padding-inline: var(--size-3);
    padding-block-start: var(--size-4);
    padding-block-end: var(--size-11);
  }

  @media (--md-n-above) {
    main {
      max-width: var(--size-content-3);
      margin-inline: auto;
      padding-inline: 0;
    }
  }

  :global(article > h2) {
    margin-block-start: var(--size-6);
    color: hsl(var(--choco-7-hsl));
    font-size: var(--font-size-fluid-2);
    font-weight: 600;
  }

  @media (--OSdark) {
    :global(article > h2) {
      color: hsl(46, 100%, 48%);
    }
  }

  :global(article > h2:first-of-type) {
    margin-block-start: var(--size-6);
  }

  :global(article > h3) {
    margin-block-start: var(--size-3);
    color: hsl(var(--gray-8-hsl));
    font-size: var(--font-size-fluid-1);
    font-weight: 600;
  }

  @media (--OSdark) {
    :global(article > h3) {
      color: hsl(var(--gray-4-hsl));
    }
  }

  :global(h3 > .icon) {
    display: inline-block;
    margin-inline-end: var(--size-2);
    vertical-align: top;
  }

  @media (--md-n-above) {
    :global(article > h3) {
      position: relative;
    }

    :global(h3 > .icon) {
      position: absolute;
      right: 100%;
    }
  }

  :global(article > p) {
    color: hsl(var(--gray-7-hsl));
  }

  @media (--OSdark) {
    :global(article > p) {
      color: hsl(var(--gray-5-hsl));
    }
  }

  :global(article > p:first-of-type) {
    margin-block-start: var(--size-5);
  }

  :global(p:not(article > p + p)) {
    margin-block-start: var(--size-2);
  }

  :global(article > p + p) {
    margin-block-start: var(--size-3);
  }

  :global(figure) {
    margin-block-start: var(--size-2);
  }

  .updated {
    margin-block-start: var(--size-4);
  }

  .meta {
    display: grid;
    grid: auto / var(--size-12) var(--size-11);
    margin-block-start: var(--size-5);
  }

  /* .metaItem {
    display: contents;
  } */

  .metaTitle {
    color: hsl(var(--gray-6-hsl));
    font-size: var(--font-size-0);
    letter-spacing: var(--size-1);
    text-transform: uppercase;
  }

  /*.capitalize {
    text-transform: capitalize;
  }*/

  .metaDetail {
    color: hsl(var(--gray-7-hsl));
  }

  @media (--OSdark) {
    .metaDetail {
      color: hsl(var(--gray-4-hsl));
    }
  }
</style>
