---
import {
  SITE_NAME,
  SITE_DESCRIPTION,
  INTERSECTION,
  INTERSECTION_DESCRIPTION,
  categories
} from '@/consts';
import { ClientRouter } from 'astro:transitions';
import siteUrl from '@/helpers/siteUrl';
import { Font } from 'astro:assets';
import { getAbsoluteLocaleUrl } from 'astro:i18n';
import type { Locale } from '@/types';

const { pathname } = Astro.url;

const { category, blogPost } = Astro.params;
const { title, description, hasCover, cover, dateModified, datePublished } =
  Astro.props;

const locale = Astro.currentLocale as Locale;
const isDefaultLocale = locale === 'en';

const foundCategory = category
  ? categories.find(({ slug }) => category === slug)
  : undefined;
const categoryTitle = foundCategory ? foundCategory[locale].title : undefined;

const isBlogPost = !!blogPost;
const isHome = !category && !isBlogPost;
const isRoot = pathname === '/';
const hasArticleCover = !!blogPost && hasCover;
const ogType = isBlogPost ? 'article' : 'webiste';

const hasAlternate =
  !blogPost ||
  (isBlogPost
    ? [
        'kagawa-sanagijima',
        'tokyo-gokokuji',
        'fukui-gotanjouji',
        'oita-beppu',
        'miyagi-tashirojima',
        'onomichi-nekonohosomichi'
      ].includes(blogPost)
    : false);

const schema = () => {
  const website = {
    '@type': 'Website',
    name: SITE_NAME,
    url: import.meta.env.SITE_URL
  };

  const blogPosting = {
    '@type': 'BlogPosting',
    url: siteUrl(pathname),
    headline: title,
    ...(hasArticleCover
      ? {
          image: [siteUrl(`/assets/${blogPost}/og.jpg`)]
        }
      : []),
    dateModified: dateModified,
    datePublished: datePublished,
    author: [
      {
        '@type': 'Person',
        name: 'Yuming Cheung',
        url: 'https://intersection.tw'
      }
    ],
    publisher: {
      '@type': 'Organization',
      name: INTERSECTION,
      url: 'https://intersection.tw',
      logo: {
        '@type': 'ImageObject',
        name: `${INTERSECTION}: ${INTERSECTION_DESCRIPTION}`,
        width: 400,
        height: 400,
        url: 'https://intersection.tw/intersection.png'
      }
    }
  };

  const breadcrumb = {
    '@type': 'BreadcrumbList',
    name: title,
    itemListElement: [
      {
        '@type': 'ListItem',
        position: 1,
        name: categoryTitle,
        item: siteUrl(`${isDefaultLocale ? '' : '/tw'}/${category}`)
      }
    ]
  };

  return JSON.stringify({
    '@context': 'https://schema.org/',
    '@graph': [
      ...(isRoot ? [website] : []),
      ...(isBlogPost ? [blogPosting, breadcrumb] : [])
    ]
  });
};
---

<head>
  <meta charset="utf-8" />
  <title>{title ?? SITE_NAME}</title>
  <meta name="description" content={description} />
  <link rel="canonical" href={siteUrl(pathname)} />
  <meta name="viewport" content="width=device-width" />
  <link rel="icon" href="/favicon.ico" sizes="32x32" />
  <link rel="icon" href="/icon.svg" type="image/svg+xml" />
  <link rel="apple-touch-icon" href={siteUrl('/apple-touch-icon.png')} />
  <link rel="manifest" href={siteUrl('/manifest.webmanifest')} />
  {
    hasAlternate ? (
      <>
        <link
          rel="alternate"
          hreflang="zh-Hant"
          href={getAbsoluteLocaleUrl(
            'tw',
            isHome
              ? undefined
              : `${!!category ? `${category}/` : ''}${!!isBlogPost ? `${blogPost}` : ''}`
          )}
        />
        <link
          rel="alternate"
          hreflang="en"
          href={getAbsoluteLocaleUrl(
            'en',
            `${!!category ? `${category}/` : ''}${!!isBlogPost ? `${blogPost}` : ''}`
          )}
        />
        <link
          rel="alternate"
          href={getAbsoluteLocaleUrl(
            'en',
            `${!!category ? `${category}/` : ''}${!!isBlogPost ? `${blogPost}` : ''}`
          )}
          hreflang="x-default"
        />
      </>
    ) : (
      ''
    )
  }
  <meta property="og:type" content={ogType} />
  <meta property="og:site_name" content={SITE_NAME} />
  <meta property="og:url" content={siteUrl(pathname)} />
  <meta property="og:title" content={title} />
  <meta property="og:description" content={description} />
  {
    hasArticleCover && (
      <>
        <meta
          property="og:image"
          content={siteUrl(`/assets/${blogPost}/og.jpg`)}
        />
        <meta property="og:image:width" content="1200" />
        <meta property="og:image:height" content="800" />
        <meta property="og:image:alt" content={cover?.alt} />
        <meta
          property="twitter:image"
          content={siteUrl(`/assets/${blogPost}/og.jpg`)}
        />
        <meta property="twitter:card" content="summary_large_image" />
        <meta property="twitter:image:alt" content={cover?.alt} />
      </>
    )
  }
  {
    !isBlogPost && (
      <>
        <meta property="og:image" content={siteUrl('/assets/og.jpg')} />
        <meta
          property="og:image:alt"
          content={description || SITE_DESCRIPTION}
        />
        <meta property="twitter:image" content={siteUrl('/assets/og.jpg')} />
        <meta
          property="twitter:image:alt"
          content={description || SITE_DESCRIPTION}
        />
      </>
    )
  }
  <meta property="twitter:url" content={siteUrl(pathname)} />
  <meta property="twitter:title" content={title} />
  <meta property="twitter:description" content={description} />
  <meta property="fb:app_id" content="1241704385975640" />
  <script type="application/ld+json" set:html={schema()} is:inline />
  <meta name="format-detection" content="telephone=no" />
  <meta name="generator" content={Astro.generator} />
  {
    import.meta.env.PROD && (
      <script
        async
        data-logspot-pk={import.meta.env.LOGSPOT_PUBLIC_KEY}
        src="https://cdn.logspot.io/lg.js"
        is:inline
        data-astro-rerun
      />
    )
  }
  <Font cssVariable="--font-asap" preload />
  <ClientRouter />
</head>
