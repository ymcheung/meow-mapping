---
import { SITE_NAME, SITE_DESCRIPTION, INTERSECTION, INTERSECTION_DESCRIPTION } from '@/consts';
import { ClientRouter } from 'astro:transitions';
import siteUrl from '@/helpers/siteUrl';
import { Font } from 'astro:assets'
import { getAbsoluteLocaleUrl } from 'astro:i18n';

const {  pathname } = Astro.url;

const { category, blogPost } = Astro.params;
const { title, description, hasCover, cover, dateModified, datePublished } = Astro.props;

// const locale = Astro.currentLocale;
// const isDefaultLocale = locale === 'en';

const isArticle = !!blogPost;
const hasArticleCover = !!blogPost && hasCover;
const ogType = isArticle ? 'article' : 'webiste';

const hasAlternate = !blogPost || (isArticle ? (['sanagijima', 'gokokuji', 'beppo'].includes(blogPost)) : false);

const schema = () => {
  const website = {
    '@type': 'Website',
    name: 'Meow Mapping: Cat Spotting Guides',
    url: import.meta.env.SITE_URL
  };

  const blogPosting = {
    '@type': 'BlogPosting',
    url: siteUrl(pathname),
    headline: title,
    dateModified: dateModified,
    datePublished: datePublished,
    author: [
      {
        '@type': 'Person',
        name: 'Yuming Cheung',
        url: 'https://read.cv/ymcheung'
      }
    ],
    publisher: {
      '@type': 'Organization',
      name: INTERSECTION,
      url: import.meta.env.SITE,
      logo: {
        '@type': 'ImageObject',
        name: `${INTERSECTION}: ${INTERSECTION_DESCRIPTION}`,
        width: 400,
        height: 400,
        url: 'https://intersection.tw/intersection.png'
      }
    }
  };

  return JSON.stringify({
    '@context': 'https://schema.org/',
    '@graph': [website, ...(isArticle ? [blogPosting] : [])]
  });
};
---

<head>
  <meta charset="utf-8" />
  <title>{title ?? SITE_NAME}</title>
  <meta name="description" content={description} />
  <link rel="canonical" href={siteUrl(pathname)} />
  <meta name="viewport" content="width=device-width" />
  <link rel="icon" href="/favicon.ico" sizes="32x32" />
  <link rel="icon" href="/icon.svg" type="image/svg+xml" />
  <link rel="apple-touch-icon" href={siteUrl('/apple-touch-icon.png')} />
  <link rel="manifest" href={siteUrl('/manifest.webmanifest')} />
  {hasAlternate ? (
    <>
      <link rel="alternate" hreflang="zh-TW" href={getAbsoluteLocaleUrl('tw', `${!!category ? `${category}/` : ''}${!!isArticle ? `${blogPost}` : ''}`)} />
      <link rel="alternate" hreflang="en-US" href={getAbsoluteLocaleUrl('en', `${!!category ? `${category}/` : ''}${!!isArticle ? `${blogPost}` : ''}`)} />
    </>
  ) : ''}
  <meta property="og:type" content={ogType} />
  <meta property="og:site_name" content={SITE_NAME} />
  <meta property="og:url" content={siteUrl(pathname)} />
  <meta property="og:title" content={title} />
  <meta property="og:description" content={description} />
  {
  isArticle && hasArticleCover && (
    <>
      <meta property="og:image" content={siteUrl(`/assets/${blogPost}/og.jpg`)} />
      <meta property="og:image:alt" content={cover?.alt} />
      <meta property="twitter:image" content={siteUrl(`/assets/${blogPost}/og.jpg`)} />
      <meta property="twitter:image:alt" content={cover?.alt} />
    </>
  )}
  {!isArticle &&
    <>
      <meta property="og:image" content={siteUrl('/assets/og.jpg')} />
      <meta property="og:image:alt" content={description || SITE_DESCRIPTION} />
      <meta property="twitter:image" content={siteUrl('/assets/og.jpg')} />
      <meta property="twitter:image:alt" content={description || SITE_DESCRIPTION} />
    </>
  }
  <meta property="og:image:width" content="1200" />
  <meta property="og:image:height" content="800" />
  <meta property="twitter:card" content="summary_large_image" />
  <meta property="twitter:url" content={siteUrl(pathname)} />
  <meta property="twitter:title" content={title} />
  <meta property="twitter:description" content={description} />
  <meta property="fb:app_id" content="1241704385975640" />
  <script type="application/ld+json" set:html={schema()} is:inline />
  <meta name="format-detection" content="telephone=no" />
  <meta name="generator" content={Astro.generator} />
  {
    import.meta.env.PROD  && (
      <script
        async
        data-logspot-pk={import.meta.env.LOGSPOT_PUBLIC_KEY}
        src="https://cdn.logspot.io/lg.js"
        is:inline data-astro-rerun
      />
    )
  }
  <Font cssVariable='--font-asap' preload />
  <ClientRouter />
</head>
