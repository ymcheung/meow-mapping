---
import { z } from "zod";
import type { HTMLTag } from 'astro/types';
import { categories } from "@/consts";

const dockProps = z.object({
  as: z.custom<HTMLTag>().optional()
}).passthrough();

type Props = z.infer<typeof dockProps>;
const { as } = Astro.props as Props;

const { pathname } = Astro.url;
const isHome = pathname === '/';

const Box = as || 'div';

---
<nav class="dock">
  <div class="dockChild">
    <ul class="categories">
      {
        categories.map(({ title, slug, icon }) => {
          const Icon = icon;
          const isCurrentPath = `/${slug}` === pathname;

          return (
            <li class="categoryItem">
              <a class:list={['link', { isCurrent: isCurrentPath }]} href={`/${slug}`}>
                <Icon class="icon" size={24} />
              </a>
            </li>
          )}
        )
      }
    </ul>
  </div>
  <Box class="logo">
    <strong class="logoName">Meow Mapping</strong>
    <span class="logoDescription">Cat Travel Guides</span>
    {
      !isHome && <a class="link" href="/" title="Home" />
    }
  </Box>
</nav>

<style>
  @import "open-props/media";
  @import "open-props/colors-hsl";

  .dock {
    display: grid;
    grid: auto / auto auto;
    width: max-content;
    position: fixed;
    right: var(--size-2);
    bottom: var(--size-2);
    margin-block-start: calc(var(--size-2) * -1);
    background-color: hsl(var(--gray-0-hsl) / 80%);
    backdrop-filter: blur(12px);
    border-radius: var(--radius-3);
    box-shadow: var(--shadow-2);
  }

  .dockChild {
    display: contents;
  }

  .categories {
    display: grid;
    grid: auto / auto auto;
    align-content: center;
    column-gap: var(--size-4);
    padding-inline-start: var(--size-3);
  }

  .categoryItem {
    padding-inline-start: var(--size-0);
    list-style-type: none;
  }

  .categoryItem .link {
    color: hsl(var(--gray-7-hsl));
  }


  @media (--OSdark) {
    .categoryItem .link {
      color: hsl(var(--gray-5-hsl));
    }
  }


  .categoryItem .link.isCurrent {
    color: hsl(var(--gray-10-hsl));
    pointer-events: none;
  }

  @media (--OSdark) {
    .categoryItem .link.isCurrent {
      color: hsl(var(--gray-2-hsl));
    }
  }

  .logo {
    position: relative;
    padding-inline: var(--size-4);
    padding-block-start: var(--size-3);
    padding-block-end: var(--size-4);
    line-height: var(--font-lineheight-1);
  }

  @media (--OSdark) {
    .dock {
      background-color: hsl(var(--gray-9-hsl) / 80%);
    }
  }

  @media (--md-n-above) {
    .dock {
      /* max-width: calc(var(--size-content-3) + var(--size-7)); */
      margin-inline: auto;
      left: var(--size-2);
    }
  }

  .logoName {
    display: block;
    color: var(--gray-10);
    font-size: var(--font-size-2);
    transform: skewY(-4deg);
  }

  @media (--OSdark) {
    .logoName {
      color: hsl(46, 100%, 48%);
    }
  }

  .logoDescription {
    display: block;
    margin-inline-start: var(--size-4);
    color: hsl(var(--gray-10-hsl));
    font-size: var(--font-size-1);
    font-weight: normal;
    font-style: italic;
    transform: skewY(-4deg);
  }

  @media (--OSdark) {
    .logoDescription {
      color: hsl(var(--gray-4-hsl));
    }
  }

  .logo .link {
    display: block;
    position: absolute;
    inset: 0;
  }
</style>
