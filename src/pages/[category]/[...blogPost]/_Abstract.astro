---
import { z } from 'astro:content';
import { transportations as  transportationIcon } from "@/consts";
import { postSchema } from '@/schema';
import formatDuration from '@/helpers/formatDuration';

const transportationSchema = postSchema.pick({ transportation: true });

type Props = z.infer<typeof transportationSchema>;

const { transportation } = Astro.props;

const { duration, unit } = formatDuration(transportation.duration);

---

<div class="abstract">
  <div class="time">
    <strong class="transportationTime">~{duration}</strong>
    <span class="transportationUnit">{unit}</span>
  </div>
  {!!transportation.by &&
    <ul class="by">
      {transportation.by.map((by) => {
        const Icon = transportationIcon[by].icon;
        return (
          <li>
            <Icon class="icon" />
          </li>
        )
      })}
    </ul>
  }
  <p class="transportationFrom">from {transportation.from.place}<br />{transportation.from.kanji}</p>
</div>

<style>
  @import "open-props/media";
  @import "open-props/colors-hsl";

  .abstract {
    display: grid;
    grid: "time by" auto
          "from from" auto / var(--size-11) 1fr;
    margin-block-start: var(--size-3);
    margin-inline: calc(var(--size-2) * -1);
    padding-inline: var(--size-2);
    padding-block-start: var(--size-2);
    padding-block-end: var(--size-3);
    background-color: hsl(var(--gray-2-hsl) / 80%);
    backdrop-filter: blur(12px);
    border-radius: var(--radius-3);
    box-shadow: var(--shadow-1);
  }

  @media (--OSdark) {
    .abstract {
      background-color: hsl(var(--gray-8-hsl) / 80%);
    }
  }


  @media (--md-n-above) {
    .abstract {
      margin-inline: calc(var(--size-3) * -1);
      padding-inline: var(--size-3);
    }
  }

  .time {
    grid-area: time;
  }

  .transportationTime {
    color: hsl(var(--gray-7-hsl));
    font-size: var(--font-size-5);
  }


  @media (--OSdark) {
    .transportationTime {
      color: hsl(var(--gray-2-hsl));
    }
  }

  .transportationUnit {
    color: hsl(var(--gray-6-hsl));
    font-size: var(--font-size-1);
  }

  .by {
    display: grid;
    /* grid: auto / repeat(auto-fill, minmax(var(--size-8), 1fr)); */
    grid: auto / repeat(auto-fit, var(--size-8));
    align-items: center;
    justify-content: end;
    grid-area: by;
    padding-inline-start: 0;
    padding-inline-end: var(--size-2);
  }

  @media (--md-n-above) {
    .by {
      padding-inline-end: 0;
    }
  }

  .by li {
    padding-inline-start: 0;
    list-style-type: none;
  }

  .by .icon {
    margin-inline-start: auto;
    color: hsl(var(--gray-6-hsl));
  }

  @media (--OSdark) {
    .by .icon {
      color: hsl(var(--gray-5-hsl));
    }
  }

  .transportationFrom {
    grid-area: from;
    color: hsl(var(--gray-7-hsl));
    font-size: var(--font-size-1);
  }

  @media (--OSdark) {
    .transportationFrom {
      color: hsl(var(--gray-5-hsl));
    }
  }

  hr {
    /* margin-block-start: var(--size-1);
    margin-block-end: 0; */
    margin-block: var(--size-3);
    background-color: transparent;
    border: 1px dashed hsl(var(--gray-7-hsl));
    /* border-bottom: none; */
  }
</style>
